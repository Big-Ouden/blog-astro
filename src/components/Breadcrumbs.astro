---
import { getLangFromUrl, useTranslations, getLocalizedPath } from '@i18n/utils';
import { ui } from '@i18n/ui';

interface Props {
	display?: boolean;
}

const {
	display = true,
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const currentPath = Astro.url.pathname;

// Remove trailing slash except for root
const cleanPath = currentPath.replace(/\/$/, '') || '/';

// Split path into segments and filter out empty ones
const allSegments = cleanPath.split('/').filter(segment => segment !== '');

// Remove language codes (fr, en, etc.)
const pathSegments = allSegments.filter(segment => !(segment in ui));

/**
 * Utility function to format breadcrumb segment names.
 * - Decodes URL-encoded characters (%20, %C3%A9, etc.)
 * - Decodes HTML entities (&amp;, &eacute;, etc.)
 * - Replaces hyphens/underscores with spaces
 * - Capitalizes each word (locale-aware for accents)
 */
function formatSegmentName(segment: string): string {
	let decoded = decodeURIComponent(segment);

	// Decode HTML entities
	if (globalThis.document) {
		const txt = document.createElement('textarea');
		txt.innerHTML = decoded;
		decoded = txt.value;
	}

	decoded = decoded.replace(/[-_]/g, ' ');

	decoded = decoded.replace(/\p{L}[\p{L}\p{M}]*/gu, (word) =>
		word.charAt(0).toLocaleUpperCase(lang) + word.slice(1)
	);

	return decoded;
}

/**
 * Generates the list of breadcrumbs based on current path
 */
function generateBreadcrumbs() {
	const breadcrumbs = [
		{ 
			label: t('nav.home'), 
			href: getLocalizedPath(lang, ''),
			isLast: pathSegments.length === 0
		}
	];

	// Special handling for posts
	if (pathSegments[0] === 'posts') {
		breadcrumbs.push({
			label: t('nav.blog'),
			href: getLocalizedPath(lang, 'blog'),
			isLast: false
		});
		
		if (pathSegments.length > 1) {
			const postSlug = pathSegments[pathSegments.length - 1];
			breadcrumbs.push({
				label: formatSegmentName(postSlug),
				href: currentPath,
				isLast: true
			});
		}
	} 
	
	// Special handling for projects
	else if (pathSegments[0] === 'projects') {
		breadcrumbs.push({
			label: t('nav.projects'),
			href: getLocalizedPath(lang, 'projects'),
			isLast: pathSegments.length === 1
		});
		
		if (pathSegments.length > 1) {
			const projectSlug = pathSegments[pathSegments.length - 1];
			breadcrumbs.push({
				label: formatSegmentName(projectSlug),
				href: currentPath,
				isLast: true
			});
		}
	} 
	
	// Generic handling for other paths
	else {
		pathSegments.forEach((segment, index) => {
			const isLast = index === pathSegments.length - 1;
			let label = '';
			let href = '';
			
			switch (segment) {
				case 'blog':
					label = t('nav.blog');
					href = getLocalizedPath(lang, 'blog');
					break;
				case 'projects':
					label = t('nav.projects');
					href = getLocalizedPath(lang, 'projects');
					break;
				case 'tags':
					label = t('nav.tags');
					href = getLocalizedPath(lang, 'tags');
					break;
				case 'about':
					label = t('nav.about');
					href = getLocalizedPath(lang, 'about');
					break;
				case 'contact':
					label = t('nav.contact');
					href = getLocalizedPath(lang, 'contact');
					break;
				default:
					// Special handling for tag detail pages
					if (pathSegments[0] === 'tags' && index === 1) {
						label = `#${formatSegmentName(segment)}`;
						href = getLocalizedPath(lang, `tags/${segment}`);
					} else {
						const pathToSegment = pathSegments.slice(0, index + 1).join('/');
						label = formatSegmentName(segment);
						href = isLast ? currentPath : getLocalizedPath(lang, pathToSegment);
					}
			}
			
			if (label) {
				breadcrumbs.push({
					label,
					href,
					isLast
				});
			}
		});
	}
	
	return breadcrumbs;
}

const breadcrumbItems = generateBreadcrumbs();
---

{display && breadcrumbItems.length > 1 && (
	<nav class="breadcrumbs text-sm" aria-label="Breadcrumb navigation">
		<ul>
			{breadcrumbItems.map((item) => (
				<li>
					{item.isLast ? (
						<span class="text-base-content/70" aria-current="page">
							{item.label}
						</span>
					) : (
						<a 
							href={item.href} 
							class="hover:text-primary transition-colors"
							aria-label={`Navigate to ${item.label}`}
						>
							{item.label}
						</a>
					)}
				</li>
			))}
		</ul>
	</nav>
)}

